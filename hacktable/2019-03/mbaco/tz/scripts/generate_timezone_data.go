package main

import (
	"bytes"
	"flag"
	"fmt"
	"go/format"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strings"
	"text/template"
)

func main() {
	err := generate()
	if err != nil {
		log.Fatal(err)
	}
}

const tmpl = `
// Code generated by script. DO NOT EDIT.

package {{.Package}}

import "errors"

func zoneData(name string) ([]byte, error) {
	var files = map[string][]byte{
	{{range $name, $bytes := .Files}}
		"{{$name}}": []byte{ {{range $bytes}}{{.}},{{end}} },
	{{end}}
	}

	data, ok := files[name]
	if !ok {
		return nil, errors.New("timezone not found")
	}

	return data, nil
}

`

type tmplData struct {
	Package string
	Files   map[string][]byte
}

func generate() error {
	var outFile string
	flag.StringVar(&outFile, "o", "", "output go `file`")
	flag.Parse()

	inputDir := "zoneinfo/"

	f, err := os.Create(outFile)
	if err != nil {
		return err
	}
	defer f.Close()

	files := map[string][]byte{}
	err = filepath.Walk(inputDir, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return fmt.Errorf("walking: %s", err)
		}

		if info.IsDir() {
			return nil
		}

		contents, err := ioutil.ReadFile(path)
		if err != nil {
			return fmt.Errorf("reading file: %s", err)
		}
		path = filepath.ToSlash(path)
		path = strings.TrimPrefix(path, inputDir)
		files[path] = contents
		return nil
	})
	if err != nil {
		return err
	}

	t, err := template.New("").Parse(tmpl)
	if err != nil {
		return err
	}

	buf := bytes.Buffer{}
	err = t.Execute(&buf, tmplData{Package: os.Getenv("GOPACKAGE"), Files: files})
	if err != nil {
		return err
	}

	formatted, err := format.Source(buf.Bytes())
	if err != nil {
		return err
	}

	_, err = f.Write(formatted)
	if err != nil {
		return err
	}

	return nil
}
